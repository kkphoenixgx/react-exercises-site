{"version":3,"file":"static/js/264.c38f1096.chunk.js","mappings":"6NAqCA,EA9BmB,WACjB,IAAMA,EAAa,CACjB,IAAIC,EAAAA,YACJ,IAAIC,EAAAA,eAAe,SACnB,IAAIC,EAAAA,qBAAqB,UAG3B,OACE,iBAAKC,UAAU,aAAY,WACzB,oFAEA,UAAC,KAAM,CAACC,OAAQ,CAAEC,SAAU,CAAC,EAAG,EAAG,IAAK,WAEtC,SAACC,EAAA,EAAU,CAACD,SAAU,CAAC,EAAG,EAAG,GAAIN,WAAYA,EAAYQ,WAAW,KACpE,uBAAYC,KAAM,CAAC,MAEnB,mBAAOH,SAAU,EAAE,EAAG,EAAG,GAAG,WAC1B,SAACC,EAAA,EAAU,CAACP,WAAYA,EAAYQ,WAAW,KAC/C,uBAAYC,KAAM,CAAC,SAGrB,SAACC,EAAA,EAAa,QAGhB,mIAIN,C,iGChCe,SAASH,EAAW,GAA6C,IAA3CD,EAAQ,EAARA,SAAUN,EAAU,EAAVA,WAAW,EAAD,EAAEQ,UAAAA,OAAS,OAAO,EACnEG,GAAMC,EAAAA,EAAAA,UACZ,GAA0BC,EAAAA,EAAAA,UAAS,GAAE,eAA9BC,EAAK,KAAEC,EAAQ,KAStB,OAPAC,EAAAA,EAAAA,IAAS,SAACC,EAAGC,GACPV,IAEJG,EAAIQ,QAAQC,SAASC,GAAKH,EAC1BP,EAAIQ,QAAQC,SAASE,GAAK,GAAMJ,EAClC,KAGE,iBACEZ,SAAUA,EACVK,IAAKA,EACLY,cAAe,WACbR,GAAUD,EAAQ,GAAK,EACzB,EACAU,SAAUxB,EAAWc,GAAO,UAE5B,8BAAmBW,MAAO,OAAQC,WAAS,KAGjD,C","sources":["components/Threejs/AxesHelper.jsx","components/Threejs/utils/Polyhedron.js"],"sourcesContent":["import './styles/axeshelper.css'\r\n\r\nimport { Canvas } from '@react-three/fiber'\r\nimport Polyhedron from './utils/Polyhedron'\r\nimport { OrbitControls } from '@react-three/drei'\r\nimport { BoxGeometry, SphereGeometry, DodecahedronGeometry} from 'three'\r\n\r\nconst AxesHelper = ()=>{\r\n  const polyhedron = [\r\n    new BoxGeometry(),\r\n    new SphereGeometry(0.785398),\r\n    new DodecahedronGeometry(0.785398),\r\n  ]\r\n\r\n  return (\r\n    <div className=\"axesHelper\">\r\n      <h2>Here we are axesHelper with 1 of length for each side </h2>\r\n\r\n      <Canvas camera={{ position: [0, 0, 3] }}>\r\n        \r\n        <Polyhedron position={[2, 0, 0]} polyhedron={polyhedron} canRotate={false} />\r\n        <axesHelper args={[1]} />\r\n\r\n        <group position={[-2, 0, 0]} >\r\n          <Polyhedron polyhedron={polyhedron} canRotate={false} />\r\n          <axesHelper args={[1]} />\r\n        </group>\r\n\r\n        <OrbitControls />\r\n      </Canvas>\r\n\r\n      <p>You can see that we can use a gridHelper in a object. You can create it using a group with a position</p>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AxesHelper;","import { useRef, useState } from 'react'\r\nimport { useFrame } from '@react-three/fiber'\r\n\r\nexport default function Polyhedron({ position, polyhedron, canRotate = true }) {\r\n  const ref = useRef()\r\n  const [count, setCount] = useState(0)\r\n\r\n  useFrame((_, delta) => {\r\n    if(!canRotate) return;\r\n\r\n    ref.current.rotation.x += delta\r\n    ref.current.rotation.y += 0.5 * delta\r\n  })\r\n\r\n  return (\r\n    <mesh\r\n      position={position}\r\n      ref={ref}\r\n      onPointerDown={() => {\r\n        setCount((count + 1) % 3)\r\n      }}\r\n      geometry={polyhedron[count]}\r\n    >\r\n      <meshBasicMaterial color={'lime'} wireframe />\r\n    </mesh>\r\n  )\r\n}"],"names":["polyhedron","BoxGeometry","SphereGeometry","DodecahedronGeometry","className","camera","position","Polyhedron","canRotate","args","OrbitControls","ref","useRef","useState","count","setCount","useFrame","_","delta","current","rotation","x","y","onPointerDown","geometry","color","wireframe"],"sourceRoot":""}